import type { Document } from '../doc/Document.js';
import type { ParsedNode } from '../nodes/Node.js';
import type { Token } from '../parse/tokens.js';
export interface Props {
    spaceBefore: boolean;
    comment: string;
    anchor: string;
    tagName: string;
}
declare const CN: {
    composeNode: typeof composeNode;
    composeEmptyNode: typeof composeEmptyNode;
};
export declare type ComposeNode = typeof CN;
export declare function composeNode(doc: Document.Parsed, token: Token, props: Props, onError: (offset: number, message: string, warning?: boolean) => void): ParsedNode;
export declare function composeEmptyNode(doc: Document.Parsed, offset: number, before: Token[] | undefined, pos: number | null, { spaceBefore, comment, anchor, tagName }: Props, onError: (offset: number, message: string, warning?: boolean) => void): import("../index.js").Scalar.Parsed;
export {};
